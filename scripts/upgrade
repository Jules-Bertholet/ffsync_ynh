#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

app=$YNH_APP_INSTANCE_NAME

# Retrieve arguments
domain=$(ynh_app_setting_get "$app" domain)
path_url=$(ynh_app_setting_get "$app" path)
db_name=$(ynh_app_setting_get "$app" db_name)
db_pwd=$(ynh_app_setting_get "$app" mysqlpwd)
db_user=$app
final_path=$(ynh_app_setting_get "$app" final_path)
secret=$(ynh_app_setting_get "$app" secret)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid "$app")
	ynh_app_setting_set $app db_name "$db_name"
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/opt/yunohost/$app
	ynh_app_setting_set "$app" final_path "$final_path"
fi

# If path_url doesn't exist, create it
if [ -z "$path_url" ]; then
	path_url=$(ynh_app_setting_get "$app" path)
	ynh_app_setting_set "$app" path "$path_url"
	ynh_app_setting_delete "$app" path
fi

# Detect old installation style
if [ -e /etc/init.d/ffsync ]; then
	service ffsync stop
	update-rc.d -f ffsync remove

	ynh_secure_remove /etc/init.d/ffsync
	ynh_secure_remove /var/log/ffsync.log
	ynh_secure_remove /opt/yunohost/ffsync

	yunohost service remove "$app"
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path "$path_url")

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# INSTALL DEPENDENCIES
#=================================================

# Check depends installation
ynh_install_app_dependencies python-dev python-virtualenv \
			 uwsgi uwsgi-plugin-python \
			 `# ARM support: ` \
			 build-essential libssl-dev libffi-dev

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

if [ "$path_url" == "/" ]
then
	# $finalnginxconf comes from ynh_add_nginx_config
	# uwsgi_param is only needed for non-root installation
	ynh_replace_string "uwsgi_param "     "#uwsgi_param "     "$finalnginxconf"
	ynh_replace_string "uwsgi_modifier1 " "#uwsgi_modifier1 " "$finalnginxconf"

	ynh_store_file_checksum "$finalnginxconf"
else
	# add rewrite for alias_traversal protection
	ynh_replace_string "^#sub_path_only" "" "../conf/nginx.conf"
fi


#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create "$app"

#=================================================
# pip installation
#=================================================

virtualenv "$final_path/local"
# Init virtualenv
(
	set +o nounset
	source "$final_path/local/bin/activate"
	set -o nounset
	cd "$final_path"
	pip install --upgrade pip
	pip install pyramid_chameleon
	CFLAGS="-Wno-error -Wno-error=format-security" \
		ARCHFLAGS="-Wno-error=unused-command-line-argument-hard-error-in-future" \
		pip install --requirement "$final_path/requirements.txt"

	python "$final_path/setup.py" develop

	touch "$final_path/local/COMPLETE"
)

# Add nice homepage
cp -r ../sources/page $final_path/syncserver/
(cd "$final_path/syncserver" && patch -p1 < $YNH_CWD/../sources/homepage.patch) || echo "Unable to apply patches"

#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown $app -R $final_path
chmod u=rwX,g=rX,o= -R $final_path

#=================================================
# SETUP UWSGI
#=================================================

# create config file syncserver.ini
rm "$final_path/syncserver.ini"
ln -s "/etc/uwsgi/apps-available/$app.ini" "$final_path/syncserver.ini"

# configure uwsgi
ynh_add_uwsgi_service 'domain secret db_user db_pwd db_name'

#=================================================
# GENERIC FINALIZATION
#=================================================
# SETUP LOGROTATE
#=================================================

ynh_use_logrotate  /var/log/uwsgi/$app --non-append

#=================================================
# SETUP SSOWAT
#=================================================

ynh_app_setting_set "$app" skipped_uris "/"

#=================================================
# RELOAD NGINX
#=================================================

systemctl start "uwsgi-app@$app.service"
systemctl reload nginx
